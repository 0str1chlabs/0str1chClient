// Example integration with CSV uploader
import { transformCsvToCellDocs, createCellSearchText, CellDocument } from './vectorDB';

/**
 * Example: How to use the data transformer with your CSV uploader
 */
export function handleCSVUploadExample(csvData: string[][], sheetName: string) {
  console.log('=== CSV Upload Integration Example ===\n');
  
  // 1. Transform the CSV data into cell documents
  const cellDocs = transformCsvToCellDocs(csvData, sheetName, `sheet-${Date.now()}`);
  console.log(`‚úÖ Transformed ${csvData.length} rows into ${cellDocs.length} cell documents`);
  
  // 2. Show what each cell document contains
  console.log('\nüìã Sample cell document structure:');
  const sampleCell = cellDocs[0];
  console.log(JSON.stringify(sampleCell, null, 2));
  
  // 3. Show search text for AI operations
  console.log('\nüîç Search text for AI operations:');
  const searchText = createCellSearchText(sampleCell);
  console.log(searchText);
  
  // 4. Prepare for vector DB upload
  console.log('\nüöÄ Ready for vector DB upload:');
  const vectorDBPayload = cellDocs.map(cell => ({
    id: cell.cellId,
    vector: null, // This would be generated by your embedding model
    payload: {
      ...cell,
      searchText: createCellSearchText(cell)
    }
  }));
  
  console.log(`üìä Prepared ${vectorDBPayload.length} records for vector DB`);
  console.log('\nüìù Sample payload:');
  console.log(JSON.stringify(vectorDBPayload[0], null, 2));
  
  return {
    cellDocs,
    vectorDBPayload,
    summary: {
      totalCells: cellDocs.length,
      headers: cellDocs.filter(cell => cell.dataType === 'header').map(cell => cell.value),
      dataRows: new Set(cellDocs.filter(cell => cell.dataType === 'data').map(cell => cell.row)).size,
      columns: Array.from(new Set(cellDocs.map(cell => cell.col))).sort()
    }
  };
}

/**
 * Example: How to modify your CSVUploader component
 */
export function createEnhancedCSVUploadHandler(
  addSheetFromCSV: (csvData: string[][], name?: string) => void,
  pushToVectorDB?: (cellDocs: CellDocument[]) => Promise<void>
) {
  return async (csvData: string[][]) => {
    const sheetName = `Uploaded Sheet ${new Date().toLocaleTimeString()}`;
    
    // 1. Add to spreadsheet UI (existing functionality)
    addSheetFromCSV(csvData, sheetName);
    
    // 2. Transform for vector DB
    const cellDocs = transformCsvToCellDocs(csvData, sheetName);
    
    // 3. Push to vector DB (if function provided)
    if (pushToVectorDB) {
      try {
        await pushToVectorDB(cellDocs);
        console.log(`‚úÖ Successfully pushed ${cellDocs.length} cells to vector DB`);
      } catch (error) {
        console.error('‚ùå Failed to push to vector DB:', error);
      }
    }
    
    return { cellDocs, sheetName };
  };
}

// Example usage:
// const enhancedUploadHandler = createEnhancedCSVUploadHandler(
//   addSheetFromCSV, // Your existing function
//   pushToVectorDB   // Your vector DB function (optional)
// );
// 
// <CSVUploader onUpload={enhancedUploadHandler} />

// Top-level test execution for ES modules
type MaybePromise<T> = T | Promise<T>;

(async () => {
  const sampleCSV = [
    ['Product', 'Sales', 'Region'],
    ['Laptop', '1200', 'North'],
    ['Phone', '800', 'South'],
    ['Tablet', '600', 'East']
  ];
  handleCSVUploadExample(sampleCSV, 'Sales Data');
})(); 